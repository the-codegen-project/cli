#!/bin/bash

# NATS Server with JetStream for E-commerce Order Lifecycle Testing
# This script sets up a complete NATS environment for the AsyncAPI client example

echo "üöÄ Starting NATS Server with JetStream for E-commerce Order Lifecycle..."

# Stop any existing NATS container
docker stop nats-jetstream 2>/dev/null || true
docker rm nats-jetstream 2>/dev/null || true

# Get the directory where this script is located
CONFIG_FILE="./nats-server.conf"

# Check if the configuration file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "‚ùå Configuration file not found: $CONFIG_FILE"
    echo "Please ensure nats-server.conf exists in the same directory as this script."
    exit 1
fi

echo "üìÅ Using NATS configuration: $CONFIG_FILE"


# Run NATS server with JetStream
echo "üèÉ Starting NATS server container..."
docker run -d \
  --name nats-jetstream \
  -p 4222:4222 \
  -p 8222:8222 \
  -v "./nats-server.conf:/etc/nats/nats-server.conf" \
  nats:2.10-alpine \
  nats-server

# Wait for NATS to be ready
echo "‚è≥ Waiting for NATS server to be ready..."
sleep 3

# Check if NATS is running
if ! docker ps | grep -q nats-jetstream; then
    echo "‚ùå Failed to start NATS server"
    exit 1
fi

echo "‚úÖ NATS server is running"

# Create JetStream configuration using NATS CLI in the container
echo "üîß Configuring JetStream streams and consumers..."

# Create the main orders stream for order lifecycle events
docker exec nats-jetstream nats stream add \
  --subjects="orders.>" \
  --storage=memory \
  --retention=limits \
  --max-msgs=1000000 \
  --max-age=24h \
  --max-bytes=100MB \
  --replicas=1 \
  --discard=old \
  --dupe-window=2m \
  ORDERS_LIFECYCLE || echo "‚ö†Ô∏è  Stream might already exist"

# Create specific subjects for each order action
echo "üìù Creating subjects for order lifecycle events..."

# Test that we can publish to the subjects
docker exec nats-jetstream nats pub orders.created '{"test": "stream setup"}' --count=1 >/dev/null 2>&1
docker exec nats-jetstream nats pub orders.updated '{"test": "stream setup"}' --count=1 >/dev/null 2>&1
docker exec nats-jetstream nats pub orders.cancelled '{"test": "stream setup"}' --count=1 >/dev/null 2>&1
docker exec nats-jetstream nats pub orders.shipped '{"test": "stream setup"}' --count=1 >/dev/null 2>&1
docker exec nats-jetstream nats pub orders.delivered '{"test": "stream setup"}' --count=1 >/dev/null 2>&1

# Create a durable consumer for order processing (as used in the example)
docker exec nats-jetstream nats consumer add ORDERS_LIFECYCLE \
  --filter="orders.>" \
  --ack=explicit \
  --pull \
  --deliver=all \
  --max-deliver=3 \
  --wait=5s \
  --replay=instant \
  --max-pending=100 \
  order-processor || echo "‚ö†Ô∏è  Consumer might already exist"

echo ""
echo "üéâ NATS JetStream setup complete!"
echo ""
echo "üìä Connection Details:"
echo "   NATS URL: nats://localhost:4222"
echo "   Monitor URL: http://localhost:8222"
echo "   JetStream Domain: ecommerce"
echo ""
echo "üìÇ Configured Streams:"
echo "   ‚Ä¢ ORDERS_LIFECYCLE (subjects: orders.>)"
echo ""
echo "üè∑Ô∏è  Available Subjects:"
echo "   ‚Ä¢ orders.created   - New order events"
echo "   ‚Ä¢ orders.updated   - Order status updates"
echo "   ‚Ä¢ orders.cancelled - Order cancellations"
echo "   ‚Ä¢ orders.shipped   - Order shipment events"
echo "   ‚Ä¢ orders.delivered - Order delivery events"
echo ""
echo "üîÑ Configured Consumers:"
echo "   ‚Ä¢ order-processor (durable pull consumer)"
echo ""
echo "üß™ Test the setup:"
echo "   npm run demo"
echo ""
echo "üõë To stop the server:"
echo "   docker stop nats-jetstream"
echo ""
echo "üìà Monitor the server:"
echo "   docker logs -f nats-jetstream"
echo "   curl http://localhost:8222/varz"
echo ""

# Show stream info
echo "üìã Stream Information:"
docker exec nats-jetstream nats stream info ORDERS_LIFECYCLE 2>/dev/null || echo "‚ö†Ô∏è  Could not fetch stream info"

echo ""
echo "‚ú® Ready for testing! Run your AsyncAPI client demo now." 