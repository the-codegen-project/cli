// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`channels typescript should work with basic AsyncAPI inputs 1`] = `
"import * as TestPayloadModelModule from './../../../../TestPayloadModel';
import {TestParameter} from './../../../../TestParameter';
import * as Nats from 'nats';
import * as Amqp from 'amqplib';
import * as Mqtt from 'mqtt';
import * as Kafka from 'kafkajs';
import { fetchEventSource, EventStreamContentType, EventSourceMessage } from '@microsoft/fetch-event-source';
import { NextFunction, Request, Response, Router } from 'express';
export const Protocols = {
nats: {
  /**
 * NATS publish operation for \`user.signedup\`
 * 
  * @param message to publish
 * @param nc the NATS client to publish from
 * @param codec the serialization codec to use while transmitting the message
 * @param options to use while publishing the message
 */
publishToUserSignedup: (
  message: MessageTypeModule.MessageType, nc: Nats.NatsConnection, codec: any = Nats.JSONCodec(), options?: Nats.PublishOptions
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
dataToSend = codec.encode(dataToSend);
nc.publish('user.signedup', dataToSend, options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback subscribeToUserSignedupCallback
 * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param natsMsg
 */

/**
 * Core subscription for \`user.signedup\`
 * 
 * @param {subscribeToUserSignedupCallback} onDataCallback to call when messages are received
 * @param nc the NATS client to subscribe through
 * @param codec the serialization codec to use while receiving the message
 * @param options when setting up the subscription
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
subscribeToUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, natsMsg?: Nats.Msg) => void, 
  nc: Nats.NatsConnection, 
  codec: any = Nats.JSONCodec(), 
  options?: Nats.SubscriptionOptions, 
  skipMessageValidation: boolean = false
): Promise<Nats.Subscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = nc.subscribe('user.signedup', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback jetStreamPullSubscribeToUserSignedupCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param jetstreamMsg
 */

/**
 * JetStream pull subscription for \`user.signedup\`
 * 
  * @param {jetStreamPullSubscribeToUserSignedupCallback} onDataCallback to call when messages are received
 * @param js the JetStream client to pull subscribe through
 * @param options when setting up the subscription
 * @param codec the serialization codec to use while receiving the message
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
jetStreamPullSubscribeToUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, jetstreamMsg?: Nats.JsMsg) => void, 
  js: Nats.JetStreamClient, 
  options: Nats.ConsumerOptsBuilder | Partial<Nats.ConsumerOpts>, 
  codec: any = Nats.JSONCodec(), 
  skipMessageValidation: boolean = false
): Promise<Nats.JetStreamPullSubscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = await js.pullSubscribe('user.signedup', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback jetStreamPushSubscriptionFromUserSignedupCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param jetstreamMsg
 */

/**
 * JetStream push subscription for \`user.signedup\`
 * 
  * @param {jetStreamPushSubscriptionFromUserSignedupCallback} onDataCallback to call when messages are received
 * @param js the JetStream client to pull subscribe through
 * @param options when setting up the subscription
 * @param codec the serialization codec to use while receiving the message
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
jetStreamPushSubscriptionFromUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, jetstreamMsg?: Nats.JsMsg) => void, 
  js: Nats.JetStreamClient, 
  options: Nats.ConsumerOptsBuilder | Partial<Nats.ConsumerOpts>, 
  codec: any = Nats.JSONCodec(), 
  skipMessageValidation: boolean = false
): Promise<Nats.JetStreamSubscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = await js.subscribe('user.signedup', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * JetStream publish operation for \`user.signedup\`
 * 
  * @param message to publish over jetstream
 * @param js the JetStream client to publish from
 * @param codec the serialization codec to use while transmitting the message
 * @param options to use while publishing the message
 */
jetStreamPublishToUserSignedup: (
  message: MessageTypeModule.MessageType, 
  js: Nats.JetStreamClient, 
  codec: any = Nats.JSONCodec(), 
  options: Partial<Nats.JetStreamPublishOptions> = {}
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
dataToSend = codec.encode(dataToSend);
await js.publish('user.signedup', dataToSend, options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
}
},
amqp: {
  /**
 * AMQP publish operation for exchange \`user/signedup\`
 * 
  * @param message to publish
 * @param amqp the AMQP connection to send over

 */
publishToUserSignedupExchange: (
  message: MessageTypeModule.MessageType, amqp: Amqp.Connection, options?: {exchange: string | undefined} & Amqp.Options.Publish
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {    
    const exchange = options?.exchange ?? 'undefined';
    if(!exchange) {
      return reject('No exchange value found, please provide one')
    }
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
const channel = await amqp.createChannel();
const routingKey = 'user/signedup';
channel.publish(exchange, routingKey, Buffer.from(dataToSend), options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * AMQP publish operation for queue \`user/signedup\`
 * 
  * @param message to publish
 * @param amqp the AMQP connection to send over

 */
publishToUserSignedupQueue: (
  message: MessageTypeModule.MessageType, amqp: Amqp.Connection, options?: Amqp.Options.Publish
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
const channel = await amqp.createChannel();
const queue = 'user/signedup';
channel.sendToQueue(queue, Buffer.from(dataToSend), options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * AMQP subscribe operation for queue \`user/signedup\`
 * 
  * @param {subscribeToUserSignedupQueueCallback} onDataCallback to call when messages are received
 * @param amqp the AMQP connection to receive from

 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
subscribeToUserSignedupQueue: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, amqpMsg?: Amqp.ConsumeMessage) => void,
  amqp: Amqp.Connection,
  options?: Amqp.Options.Consume,
  skipMessageValidation: boolean = false
): Promise<Amqp.Channel> => {
  return new Promise(async (resolve, reject) => {
    try {
      const channel = await amqp.createChannel();
const queue = 'user/signedup';
await channel.assertQueue(queue, { durable: true });

channel.consume(queue, (msg) => {
  if (msg !== null) {
    const receivedData = msg.content.toString()
    
    const message = MessageTypeModule.unmarshal(receivedData);
    onDataCallback(undefined, message, msg);
  }
}, options);
      resolve(channel);
    } catch (e: any) {
      reject(e);
    }
  });
}
},
mqtt: {
  /**
 * MQTT publish operation for \`user/signedup\`
 * 
  * @param message to publish
 * @param mqtt the MQTT client to publish from
 */
publishToUserSignedup: (
  message: MessageTypeModule.MessageType, mqtt: Mqtt.MqttClient
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
mqtt.publish('user/signedup', dataToSend);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
}
},
kafka: {
  /**
 * Kafka publish operation for \`user.signedup\`
 * 
  * @param message to publish
 * @param kafka the KafkaJS client to publish from
 */
produceToUserSignedup: (
  message: MessageTypeModule.MessageType, kafka: Kafka.Kafka
): Promise<Kafka.Producer> => {
  return new Promise(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
      const producer = kafka.producer();
      await producer.connect();
      await producer.send({
        topic: 'user.signedup',
        messages: [
          { value: dataToSend },
        ],
      });
      resolve(producer);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback consumeFromUserSignedupCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param kafkaMsg
 */

/**
 * Kafka subscription for \`user.signedup\`
 * 
  * @param {consumeFromUserSignedupCallback} onDataCallback to call when messages are received
 * @param kafka the KafkaJS client to subscribe through
 * @param options when setting up the subscription
 * @param skipMessageValidation turn off runtime validation of outgoing messages
 */
consumeFromUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, kafkaMsg?: Kafka.EachMessagePayload) => void, kafka: Kafka.Kafka, options: {fromBeginning: boolean, groupId: string} = {fromBeginning: true, groupId: ''}, skipMessageValidation: boolean = false
): Promise<Kafka.Consumer> => {
  return new Promise(async (resolve, reject) => {
    try {
      if(!options.groupId) {
        reject('No group ID provided');
      }
      const consumer = kafka.consumer({ groupId: options.groupId });

      
      await consumer.connect();
      await consumer.subscribe({ topic: 'user.signedup', fromBeginning: options.fromBeginning });
      await consumer.run({
        eachMessage: async (kafkaMessage: Kafka.EachMessagePayload) => {
          const { topic, message } = kafkaMessage;
          const receivedData = message.value?.toString()!;
          
          const callbackData = MessageTypeModule.unmarshal(receivedData);

onDataCallback(undefined, callbackData, kafkaMessage);
        }
      });
      resolve(consumer);
    } catch (e: any) {
      reject(e);
    }
  });
}
},
event_source: {
  /**
 * Event source fetch for \`user/signedup\`
 * 
  * @param callback to call when receiving events
 * @param options additionally used to handle the event source
 */
listenForUserSignedup: async (
  callback: (messageEvent: MessageTypeModule.MessageType | null, error?: string) => void, 
  options: {authorization?: string, onClose?: (err?: string) => void, baseUrl: string, headers?: Record<string, string>}
) => {
	let eventsUrl: string = 'user/signedup';
	const url = \`\${options.baseUrl}/\${eventsUrl}\`
  const headers: Record<string, string> = {
	  ...options.headers ?? {},
    Accept: 'text/event-stream'
  }
  if(options.authorization) {
    headers['authorization'] = \`Bearer \${options?.authorization}\`;
  }
	await fetchEventSource(\`\${url}\`, {
		method: 'GET',
		headers,
		onmessage: (ev: EventSourceMessage) => {
      const callbackData = MessageTypeModule.unmarshal(ev.data);
			callback(callbackData, undefined);
		},
		onerror: (err) => {
			options.onClose?.(err);
		},
		onclose: () => {
			options.onClose?.();
		},
		async onopen(response: { ok: any; headers: { get: (arg0: string) => any }; status: number }) {
			if (response.ok && response.headers.get('content-type') === EventStreamContentType) {
				return // everything's good
			} else if (response.status >= 400 && response.status < 500 && response.status !== 429) {
				// client-side errors are usually non-retriable:
				callback(null, 'Client side error, could not open event connection')
			} else {
				callback(null, 'Unknown error, could not open event connection');
			}
		},
	})
}
,
registerUserSignedup: (
  router: Router, 
  callback: ((req: Request, res: Response, next: NextFunction, sendEvent: (message: MessageTypeModule.MessageType) => void) => void) | ((req: Request, res: Response, next: NextFunction, sendEvent: (message: MessageTypeModule.MessageType) => void) => Promise<void>)
) => {
  const event = '/user/signedup';
  router.get(event, async (req, res, next) => {
    
    res.writeHead(200, {
      'Cache-Control': 'no-cache, no-transform',
      'Content-Type': 'text/event-stream',
      Connection: 'keep-alive',
      'Access-Control-Allow-Origin': '*',
    })
    const sendEventCallback = (message: MessageTypeModule.MessageType) => {
      if (res.closed) {
        return
      }
      res.write(\`event: \${event}\\n\`)
      res.write(\`data: \${MessageTypeModule.marshal(message)}\\n\\n\`)
    }
    await callback(req, res, next,  sendEventCallback)
  })
}

}};"
`;

exports[`channels typescript should work with basic AsyncAPI inputs with no parameters 1`] = `
"import * as TestPayloadModelModule from './../../../../TestPayloadModel';
import * as Nats from 'nats';
import * as Amqp from 'amqplib';
import * as Mqtt from 'mqtt';
import * as Kafka from 'kafkajs';
import { fetchEventSource, EventStreamContentType, EventSourceMessage } from '@microsoft/fetch-event-source';
import { NextFunction, Request, Response, Router } from 'express';
export const Protocols = {
nats: {
  /**
 * NATS publish operation for \`user.signedup\`
 * 
  * @param message to publish
 * @param nc the NATS client to publish from
 * @param codec the serialization codec to use while transmitting the message
 * @param options to use while publishing the message
 */
publishToUserSignedup: (
  message: MessageTypeModule.MessageType, nc: Nats.NatsConnection, codec: any = Nats.JSONCodec(), options?: Nats.PublishOptions
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
dataToSend = codec.encode(dataToSend);
nc.publish('user.signedup', dataToSend, options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback subscribeToUserSignedupCallback
 * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param natsMsg
 */

/**
 * Core subscription for \`user.signedup\`
 * 
 * @param {subscribeToUserSignedupCallback} onDataCallback to call when messages are received
 * @param nc the NATS client to subscribe through
 * @param codec the serialization codec to use while receiving the message
 * @param options when setting up the subscription
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
subscribeToUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, natsMsg?: Nats.Msg) => void, 
  nc: Nats.NatsConnection, 
  codec: any = Nats.JSONCodec(), 
  options?: Nats.SubscriptionOptions, 
  skipMessageValidation: boolean = false
): Promise<Nats.Subscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = nc.subscribe('user.signedup', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback jetStreamPullSubscribeToUserSignedupCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param jetstreamMsg
 */

/**
 * JetStream pull subscription for \`user.signedup\`
 * 
  * @param {jetStreamPullSubscribeToUserSignedupCallback} onDataCallback to call when messages are received
 * @param js the JetStream client to pull subscribe through
 * @param options when setting up the subscription
 * @param codec the serialization codec to use while receiving the message
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
jetStreamPullSubscribeToUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, jetstreamMsg?: Nats.JsMsg) => void, 
  js: Nats.JetStreamClient, 
  options: Nats.ConsumerOptsBuilder | Partial<Nats.ConsumerOpts>, 
  codec: any = Nats.JSONCodec(), 
  skipMessageValidation: boolean = false
): Promise<Nats.JetStreamPullSubscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = await js.pullSubscribe('user.signedup', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback jetStreamPushSubscriptionFromUserSignedupCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param jetstreamMsg
 */

/**
 * JetStream push subscription for \`user.signedup\`
 * 
  * @param {jetStreamPushSubscriptionFromUserSignedupCallback} onDataCallback to call when messages are received
 * @param js the JetStream client to pull subscribe through
 * @param options when setting up the subscription
 * @param codec the serialization codec to use while receiving the message
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
jetStreamPushSubscriptionFromUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, jetstreamMsg?: Nats.JsMsg) => void, 
  js: Nats.JetStreamClient, 
  options: Nats.ConsumerOptsBuilder | Partial<Nats.ConsumerOpts>, 
  codec: any = Nats.JSONCodec(), 
  skipMessageValidation: boolean = false
): Promise<Nats.JetStreamSubscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = await js.subscribe('user.signedup', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * JetStream publish operation for \`user.signedup\`
 * 
  * @param message to publish over jetstream
 * @param js the JetStream client to publish from
 * @param codec the serialization codec to use while transmitting the message
 * @param options to use while publishing the message
 */
jetStreamPublishToUserSignedup: (
  message: MessageTypeModule.MessageType, 
  js: Nats.JetStreamClient, 
  codec: any = Nats.JSONCodec(), 
  options: Partial<Nats.JetStreamPublishOptions> = {}
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
dataToSend = codec.encode(dataToSend);
await js.publish('user.signedup', dataToSend, options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
}
},
amqp: {
  /**
 * AMQP publish operation for exchange \`user/signedup\`
 * 
  * @param message to publish
 * @param amqp the AMQP connection to send over

 */
publishToUserSignedupExchange: (
  message: MessageTypeModule.MessageType, amqp: Amqp.Connection, options?: {exchange: string | undefined} & Amqp.Options.Publish
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {    
    const exchange = options?.exchange ?? 'undefined';
    if(!exchange) {
      return reject('No exchange value found, please provide one')
    }
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
const channel = await amqp.createChannel();
const routingKey = 'user/signedup';
channel.publish(exchange, routingKey, Buffer.from(dataToSend), options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * AMQP publish operation for queue \`user/signedup\`
 * 
  * @param message to publish
 * @param amqp the AMQP connection to send over

 */
publishToUserSignedupQueue: (
  message: MessageTypeModule.MessageType, amqp: Amqp.Connection, options?: Amqp.Options.Publish
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
const channel = await amqp.createChannel();
const queue = 'user/signedup';
channel.sendToQueue(queue, Buffer.from(dataToSend), options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * AMQP subscribe operation for queue \`user/signedup\`
 * 
  * @param {subscribeToUserSignedupQueueCallback} onDataCallback to call when messages are received
 * @param amqp the AMQP connection to receive from

 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
subscribeToUserSignedupQueue: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, amqpMsg?: Amqp.ConsumeMessage) => void,
  amqp: Amqp.Connection,
  options?: Amqp.Options.Consume,
  skipMessageValidation: boolean = false
): Promise<Amqp.Channel> => {
  return new Promise(async (resolve, reject) => {
    try {
      const channel = await amqp.createChannel();
const queue = 'user/signedup';
await channel.assertQueue(queue, { durable: true });

channel.consume(queue, (msg) => {
  if (msg !== null) {
    const receivedData = msg.content.toString()
    
    const message = MessageTypeModule.unmarshal(receivedData);
    onDataCallback(undefined, message, msg);
  }
}, options);
      resolve(channel);
    } catch (e: any) {
      reject(e);
    }
  });
}
},
mqtt: {
  /**
 * MQTT publish operation for \`user/signedup\`
 * 
  * @param message to publish
 * @param mqtt the MQTT client to publish from
 */
publishToUserSignedup: (
  message: MessageTypeModule.MessageType, mqtt: Mqtt.MqttClient
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
mqtt.publish('user/signedup', dataToSend);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
}
},
kafka: {
  /**
 * Kafka publish operation for \`user.signedup\`
 * 
  * @param message to publish
 * @param kafka the KafkaJS client to publish from
 */
produceToUserSignedup: (
  message: MessageTypeModule.MessageType, kafka: Kafka.Kafka
): Promise<Kafka.Producer> => {
  return new Promise(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
      const producer = kafka.producer();
      await producer.connect();
      await producer.send({
        topic: 'user.signedup',
        messages: [
          { value: dataToSend },
        ],
      });
      resolve(producer);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback consumeFromUserSignedupCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param kafkaMsg
 */

/**
 * Kafka subscription for \`user.signedup\`
 * 
  * @param {consumeFromUserSignedupCallback} onDataCallback to call when messages are received
 * @param kafka the KafkaJS client to subscribe through
 * @param options when setting up the subscription
 * @param skipMessageValidation turn off runtime validation of outgoing messages
 */
consumeFromUserSignedup: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, kafkaMsg?: Kafka.EachMessagePayload) => void, kafka: Kafka.Kafka, options: {fromBeginning: boolean, groupId: string} = {fromBeginning: true, groupId: ''}, skipMessageValidation: boolean = false
): Promise<Kafka.Consumer> => {
  return new Promise(async (resolve, reject) => {
    try {
      if(!options.groupId) {
        reject('No group ID provided');
      }
      const consumer = kafka.consumer({ groupId: options.groupId });

      
      await consumer.connect();
      await consumer.subscribe({ topic: 'user.signedup', fromBeginning: options.fromBeginning });
      await consumer.run({
        eachMessage: async (kafkaMessage: Kafka.EachMessagePayload) => {
          const { topic, message } = kafkaMessage;
          const receivedData = message.value?.toString()!;
          
          const callbackData = MessageTypeModule.unmarshal(receivedData);

onDataCallback(undefined, callbackData, kafkaMessage);
        }
      });
      resolve(consumer);
    } catch (e: any) {
      reject(e);
    }
  });
}
},
event_source: {
  /**
 * Event source fetch for \`user/signedup\`
 * 
  * @param callback to call when receiving events
 * @param options additionally used to handle the event source
 */
listenForUserSignedup: async (
  callback: (messageEvent: MessageTypeModule.MessageType | null, error?: string) => void, 
  options: {authorization?: string, onClose?: (err?: string) => void, baseUrl: string, headers?: Record<string, string>}
) => {
	let eventsUrl: string = 'user/signedup';
	const url = \`\${options.baseUrl}/\${eventsUrl}\`
  const headers: Record<string, string> = {
	  ...options.headers ?? {},
    Accept: 'text/event-stream'
  }
  if(options.authorization) {
    headers['authorization'] = \`Bearer \${options?.authorization}\`;
  }
	await fetchEventSource(\`\${url}\`, {
		method: 'GET',
		headers,
		onmessage: (ev: EventSourceMessage) => {
      const callbackData = MessageTypeModule.unmarshal(ev.data);
			callback(callbackData, undefined);
		},
		onerror: (err) => {
			options.onClose?.(err);
		},
		onclose: () => {
			options.onClose?.();
		},
		async onopen(response: { ok: any; headers: { get: (arg0: string) => any }; status: number }) {
			if (response.ok && response.headers.get('content-type') === EventStreamContentType) {
				return // everything's good
			} else if (response.status >= 400 && response.status < 500 && response.status !== 429) {
				// client-side errors are usually non-retriable:
				callback(null, 'Client side error, could not open event connection')
			} else {
				callback(null, 'Unknown error, could not open event connection');
			}
		},
	})
}
,
registerUserSignedup: (
  router: Router, 
  callback: ((req: Request, res: Response, next: NextFunction, sendEvent: (message: MessageTypeModule.MessageType) => void) => void) | ((req: Request, res: Response, next: NextFunction, sendEvent: (message: MessageTypeModule.MessageType) => void) => Promise<void>)
) => {
  const event = '/user/signedup';
  router.get(event, async (req, res, next) => {
    
    res.writeHead(200, {
      'Cache-Control': 'no-cache, no-transform',
      'Content-Type': 'text/event-stream',
      Connection: 'keep-alive',
      'Access-Control-Allow-Origin': '*',
    })
    const sendEventCallback = (message: MessageTypeModule.MessageType) => {
      if (res.closed) {
        return
      }
      res.write(\`event: \${event}\\n\`)
      res.write(\`data: \${MessageTypeModule.marshal(message)}\\n\\n\`)
    }
    await callback(req, res, next,  sendEventCallback)
  })
}

}};"
`;

exports[`channels typescript should work with operation extension 1`] = `
"import * as TestPayloadModelModule from './../../../../TestPayloadModel';
import * as Nats from 'nats';
export const Protocols = {
nats: {
  /**
 * JetStream publish operation for \`user.signedup\`
 * 
  * @param message to publish over jetstream
 * @param js the JetStream client to publish from
 * @param codec the serialization codec to use while transmitting the message
 * @param options to use while publishing the message
 */
jetStreamPublishToUserSignedup: (
  message: MessageTypeModule.MessageType, 
  js: Nats.JetStreamClient, 
  codec: any = Nats.JSONCodec(), 
  options: Partial<Nats.JetStreamPublishOptions> = {}
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
dataToSend = codec.encode(dataToSend);
await js.publish('user.signedup', dataToSend, options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
}
}};"
`;

exports[`channels typescript should work with request and reply AsyncAPI 1`] = `
"import * as TestPayloadModelModule from './../../../../TestPayloadModel';
import * as Nats from 'nats';
import * as Amqp from 'amqplib';
import * as Mqtt from 'mqtt';
import * as Kafka from 'kafkajs';
import { fetchEventSource, EventStreamContentType, EventSourceMessage } from '@microsoft/fetch-event-source';
import { NextFunction, Request, Response, Router } from 'express';
export const Protocols = {
nats: {
  /**
 * NATS publish operation for \`ping\`
 * 
  * @param message to publish
 * @param nc the NATS client to publish from
 * @param codec the serialization codec to use while transmitting the message
 * @param options to use while publishing the message
 */
publishToPing: (
  message: MessageTypeModule.MessageType, nc: Nats.NatsConnection, codec: any = Nats.JSONCodec(), options?: Nats.PublishOptions
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
dataToSend = codec.encode(dataToSend);
nc.publish('ping', dataToSend, options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback subscribeToPingCallback
 * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param natsMsg
 */

/**
 * Core subscription for \`ping\`
 * 
 * @param {subscribeToPingCallback} onDataCallback to call when messages are received
 * @param nc the NATS client to subscribe through
 * @param codec the serialization codec to use while receiving the message
 * @param options when setting up the subscription
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
subscribeToPing: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, natsMsg?: Nats.Msg) => void, 
  nc: Nats.NatsConnection, 
  codec: any = Nats.JSONCodec(), 
  options?: Nats.SubscriptionOptions, 
  skipMessageValidation: boolean = false
): Promise<Nats.Subscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = nc.subscribe('ping', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback jetStreamPullSubscribeToPingCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param jetstreamMsg
 */

/**
 * JetStream pull subscription for \`ping\`
 * 
  * @param {jetStreamPullSubscribeToPingCallback} onDataCallback to call when messages are received
 * @param js the JetStream client to pull subscribe through
 * @param options when setting up the subscription
 * @param codec the serialization codec to use while receiving the message
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
jetStreamPullSubscribeToPing: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, jetstreamMsg?: Nats.JsMsg) => void, 
  js: Nats.JetStreamClient, 
  options: Nats.ConsumerOptsBuilder | Partial<Nats.ConsumerOpts>, 
  codec: any = Nats.JSONCodec(), 
  skipMessageValidation: boolean = false
): Promise<Nats.JetStreamPullSubscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = await js.pullSubscribe('ping', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback jetStreamPushSubscriptionFromPingCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param jetstreamMsg
 */

/**
 * JetStream push subscription for \`ping\`
 * 
  * @param {jetStreamPushSubscriptionFromPingCallback} onDataCallback to call when messages are received
 * @param js the JetStream client to pull subscribe through
 * @param options when setting up the subscription
 * @param codec the serialization codec to use while receiving the message
 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
jetStreamPushSubscriptionFromPing: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, jetstreamMsg?: Nats.JsMsg) => void, 
  js: Nats.JetStreamClient, 
  options: Nats.ConsumerOptsBuilder | Partial<Nats.ConsumerOpts>, 
  codec: any = Nats.JSONCodec(), 
  skipMessageValidation: boolean = false
): Promise<Nats.JetStreamSubscription> => {
  return new Promise(async (resolve, reject) => {
    try {
      const subscription = await js.subscribe('ping', options);
      
      (async () => {
        for await (const msg of subscription) {
          
          let receivedData: any = codec.decode(msg.data);

onDataCallback(undefined, MessageTypeModule.unmarshal(receivedData), msg);
        }
      })();
      resolve(subscription);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * JetStream publish operation for \`ping\`
 * 
  * @param message to publish over jetstream
 * @param js the JetStream client to publish from
 * @param codec the serialization codec to use while transmitting the message
 * @param options to use while publishing the message
 */
jetStreamPublishToPing: (
  message: MessageTypeModule.MessageType, 
  js: Nats.JetStreamClient, 
  codec: any = Nats.JSONCodec(), 
  options: Partial<Nats.JetStreamPublishOptions> = {}
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
dataToSend = codec.encode(dataToSend);
await js.publish('ping', dataToSend, options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
}
},
amqp: {
  /**
 * AMQP publish operation for exchange \`/ping\`
 * 
  * @param message to publish
 * @param amqp the AMQP connection to send over

 */
publishToPingExchange: (
  message: MessageTypeModule.MessageType, amqp: Amqp.Connection, options?: {exchange: string | undefined} & Amqp.Options.Publish
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {    
    const exchange = options?.exchange ?? 'undefined';
    if(!exchange) {
      return reject('No exchange value found, please provide one')
    }
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
const channel = await amqp.createChannel();
const routingKey = '/ping';
channel.publish(exchange, routingKey, Buffer.from(dataToSend), options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * AMQP publish operation for queue \`/ping\`
 * 
  * @param message to publish
 * @param amqp the AMQP connection to send over

 */
publishToPingQueue: (
  message: MessageTypeModule.MessageType, amqp: Amqp.Connection, options?: Amqp.Options.Publish
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
const channel = await amqp.createChannel();
const queue = '/ping';
channel.sendToQueue(queue, Buffer.from(dataToSend), options);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * AMQP subscribe operation for queue \`/ping\`
 * 
  * @param {subscribeToPingQueueCallback} onDataCallback to call when messages are received
 * @param amqp the AMQP connection to receive from

 * @param skipMessageValidation turn off runtime validation of incoming messages
 */
subscribeToPingQueue: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, amqpMsg?: Amqp.ConsumeMessage) => void,
  amqp: Amqp.Connection,
  options?: Amqp.Options.Consume,
  skipMessageValidation: boolean = false
): Promise<Amqp.Channel> => {
  return new Promise(async (resolve, reject) => {
    try {
      const channel = await amqp.createChannel();
const queue = '/ping';
await channel.assertQueue(queue, { durable: true });

channel.consume(queue, (msg) => {
  if (msg !== null) {
    const receivedData = msg.content.toString()
    
    const message = MessageTypeModule.unmarshal(receivedData);
    onDataCallback(undefined, message, msg);
  }
}, options);
      resolve(channel);
    } catch (e: any) {
      reject(e);
    }
  });
}
},
mqtt: {
  /**
 * MQTT publish operation for \`/ping\`
 * 
  * @param message to publish
 * @param mqtt the MQTT client to publish from
 */
publishToPing: (
  message: MessageTypeModule.MessageType, mqtt: Mqtt.MqttClient
): Promise<void> => {
  return new Promise<void>(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
mqtt.publish('/ping', dataToSend);
      resolve();
    } catch (e: any) {
      reject(e);
    }
  });
}
},
kafka: {
  /**
 * Kafka publish operation for \`ping\`
 * 
  * @param message to publish
 * @param kafka the KafkaJS client to publish from
 */
produceToPing: (
  message: MessageTypeModule.MessageType, kafka: Kafka.Kafka
): Promise<Kafka.Producer> => {
  return new Promise(async (resolve, reject) => {
    try {
      let dataToSend: any = MessageTypeModule.marshal(message);
      const producer = kafka.producer();
      await producer.connect();
      await producer.send({
        topic: 'ping',
        messages: [
          { value: dataToSend },
        ],
      });
      resolve(producer);
    } catch (e: any) {
      reject(e);
    }
  });
},
/**
 * Callback for when receiving messages
 *
 * @callback consumeFromPingCallback
  * @param err if any error occurred this will be sat
 * @param msg that was received
 * @param kafkaMsg
 */

/**
 * Kafka subscription for \`ping\`
 * 
  * @param {consumeFromPingCallback} onDataCallback to call when messages are received
 * @param kafka the KafkaJS client to subscribe through
 * @param options when setting up the subscription
 * @param skipMessageValidation turn off runtime validation of outgoing messages
 */
consumeFromPing: (
  onDataCallback: (err?: Error, msg?: MessageTypeModule.MessageType, kafkaMsg?: Kafka.EachMessagePayload) => void, kafka: Kafka.Kafka, options: {fromBeginning: boolean, groupId: string} = {fromBeginning: true, groupId: ''}, skipMessageValidation: boolean = false
): Promise<Kafka.Consumer> => {
  return new Promise(async (resolve, reject) => {
    try {
      if(!options.groupId) {
        reject('No group ID provided');
      }
      const consumer = kafka.consumer({ groupId: options.groupId });

      
      await consumer.connect();
      await consumer.subscribe({ topic: 'ping', fromBeginning: options.fromBeginning });
      await consumer.run({
        eachMessage: async (kafkaMessage: Kafka.EachMessagePayload) => {
          const { topic, message } = kafkaMessage;
          const receivedData = message.value?.toString()!;
          
          const callbackData = MessageTypeModule.unmarshal(receivedData);

onDataCallback(undefined, callbackData, kafkaMessage);
        }
      });
      resolve(consumer);
    } catch (e: any) {
      reject(e);
    }
  });
}
},
event_source: {
  /**
 * Event source fetch for \`/ping\`
 * 
  * @param callback to call when receiving events
 * @param options additionally used to handle the event source
 */
listenForPing: async (
  callback: (messageEvent: MessageTypeModule.MessageType | null, error?: string) => void, 
  options: {authorization?: string, onClose?: (err?: string) => void, baseUrl: string, headers?: Record<string, string>}
) => {
	let eventsUrl: string = '/ping';
	const url = \`\${options.baseUrl}/\${eventsUrl}\`
  const headers: Record<string, string> = {
	  ...options.headers ?? {},
    Accept: 'text/event-stream'
  }
  if(options.authorization) {
    headers['authorization'] = \`Bearer \${options?.authorization}\`;
  }
	await fetchEventSource(\`\${url}\`, {
		method: 'GET',
		headers,
		onmessage: (ev: EventSourceMessage) => {
      const callbackData = MessageTypeModule.unmarshal(ev.data);
			callback(callbackData, undefined);
		},
		onerror: (err) => {
			options.onClose?.(err);
		},
		onclose: () => {
			options.onClose?.();
		},
		async onopen(response: { ok: any; headers: { get: (arg0: string) => any }; status: number }) {
			if (response.ok && response.headers.get('content-type') === EventStreamContentType) {
				return // everything's good
			} else if (response.status >= 400 && response.status < 500 && response.status !== 429) {
				// client-side errors are usually non-retriable:
				callback(null, 'Client side error, could not open event connection')
			} else {
				callback(null, 'Unknown error, could not open event connection');
			}
		},
	})
}
,
registerPing: (
  router: Router, 
  callback: ((req: Request, res: Response, next: NextFunction, sendEvent: (message: MessageTypeModule.MessageType) => void) => void) | ((req: Request, res: Response, next: NextFunction, sendEvent: (message: MessageTypeModule.MessageType) => void) => Promise<void>)
) => {
  const event = '/ping';
  router.get(event, async (req, res, next) => {
    
    res.writeHead(200, {
      'Cache-Control': 'no-cache, no-transform',
      'Content-Type': 'text/event-stream',
      Connection: 'keep-alive',
      'Access-Control-Allow-Origin': '*',
    })
    const sendEventCallback = (message: MessageTypeModule.MessageType) => {
      if (res.closed) {
        return
      }
      res.write(\`event: \${event}\\n\`)
      res.write(\`data: \${MessageTypeModule.marshal(message)}\\n\\n\`)
    }
    await callback(req, res, next,  sendEventCallback)
  })
}

}};"
`;
