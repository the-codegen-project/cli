// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`payloads typescript should not render validation functions 1`] = `
"import {SimpleObject} from './SimpleObject';
type UnionPayload = SimpleObject | boolean | string;

export function unmarshal(json: any): UnionPayload {
  if(typeof json === 'object') {
    if(json.type === 'SimpleObject') {
  return SimpleObject.unmarshal(json);
  }
  }
  return JSON.parse(json);
}
export function marshal(payload: UnionPayload) {
  if(payload instanceof SimpleObject) {
return payload.marshal();
}


  return JSON.stringify(payload);
}
export { UnionPayload };"
`;

exports[`payloads typescript should not render validation functions 2`] = `
"
class SimpleObject2 {
  private _displayName?: string;
  private _email?: string;
  private _additionalProperties?: Record<string, any>;

  constructor(input: {
    displayName?: string,
    email?: string,
    additionalProperties?: Record<string, any>,
  }) {
    this._displayName = input.displayName;
    this._email = input.email;
    this._additionalProperties = input.additionalProperties;
  }

  get displayName(): string | undefined { return this._displayName; }
  set displayName(displayName: string | undefined) { this._displayName = displayName; }

  get email(): string | undefined { return this._email; }
  set email(email: string | undefined) { this._email = email; }

  get additionalProperties(): Record<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Record<string, any> | undefined) { this._additionalProperties = additionalProperties; }

  public marshal() : string {
    let json = '{'
    if(this.displayName !== undefined) {
      json += \`"displayName": \${typeof this.displayName === 'number' || typeof this.displayName === 'boolean' ? this.displayName : JSON.stringify(this.displayName)},\`;
    }
    if(this.email !== undefined) {
      json += \`"email": \${typeof this.email === 'number' || typeof this.email === 'boolean' ? this.email : JSON.stringify(this.email)},\`;
    }
    if(this.additionalProperties !== undefined) { 
      for (const [key, value] of this.additionalProperties.entries()) {
        //Only unwrap those that are not already a property in the JSON object
        if(["displayName","email","additionalProperties"].includes(String(key))) continue;
        json += \`"\${key}": \${typeof value === 'number' || typeof value === 'boolean' ? value : JSON.stringify(value)},\`;
      }
    }
    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  public static unmarshal(json: string | object): SimpleObject2 {
    const obj = typeof json === "object" ? json : JSON.parse(json);
    const instance = new SimpleObject2({} as any);

    if (obj["displayName"] !== undefined) {
      instance.displayName = obj["displayName"];
    }
    if (obj["email"] !== undefined) {
      instance.email = obj["email"];
    }
  
    instance.additionalProperties = new Map();
    const propsToCheck = Object.entries(obj).filter((([key,]) => {return !["displayName","email","additionalProperties"].includes(key);}));
    for (const [key, value] of propsToCheck) {
      instance.additionalProperties.set(key, value as any);
    }
    return instance;
  }
}
export { SimpleObject2 };"
`;

exports[`payloads typescript should work with basic AsyncAPI inputs 1`] = `
"import {SimpleObject} from './SimpleObject';
type UnionPayload = SimpleObject | boolean | string;

export function unmarshal(json: any): UnionPayload {
  if(typeof json === 'object') {
    if(json.type === 'SimpleObject') {
  return SimpleObject.unmarshal(json);
  }
  }
  return JSON.parse(json);
}
export function marshal(payload: UnionPayload) {
  if(payload instanceof SimpleObject) {
return payload.marshal();
}


  return JSON.stringify(payload);
}
export { UnionPayload };"
`;

exports[`payloads typescript should work with basic AsyncAPI inputs 2`] = `
"import {Ajv, Options as AjvOptions, ErrorObject, ValidateFunction} from 'ajv';
import addFormats from 'ajv-formats';
class SimpleObject2 {
  private _displayName?: string;
  private _email?: string;
  private _additionalProperties?: Record<string, any>;

  constructor(input: {
    displayName?: string,
    email?: string,
    additionalProperties?: Record<string, any>,
  }) {
    this._displayName = input.displayName;
    this._email = input.email;
    this._additionalProperties = input.additionalProperties;
  }

  get displayName(): string | undefined { return this._displayName; }
  set displayName(displayName: string | undefined) { this._displayName = displayName; }

  get email(): string | undefined { return this._email; }
  set email(email: string | undefined) { this._email = email; }

  get additionalProperties(): Record<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Record<string, any> | undefined) { this._additionalProperties = additionalProperties; }

  public marshal() : string {
    let json = '{'
    if(this.displayName !== undefined) {
      json += \`"displayName": \${typeof this.displayName === 'number' || typeof this.displayName === 'boolean' ? this.displayName : JSON.stringify(this.displayName)},\`;
    }
    if(this.email !== undefined) {
      json += \`"email": \${typeof this.email === 'number' || typeof this.email === 'boolean' ? this.email : JSON.stringify(this.email)},\`;
    }
    if(this.additionalProperties !== undefined) { 
      for (const [key, value] of this.additionalProperties.entries()) {
        //Only unwrap those that are not already a property in the JSON object
        if(["displayName","email","additionalProperties"].includes(String(key))) continue;
        json += \`"\${key}": \${typeof value === 'number' || typeof value === 'boolean' ? value : JSON.stringify(value)},\`;
      }
    }
    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  public static unmarshal(json: string | object): SimpleObject2 {
    const obj = typeof json === "object" ? json : JSON.parse(json);
    const instance = new SimpleObject2({} as any);

    if (obj["displayName"] !== undefined) {
      instance.displayName = obj["displayName"];
    }
    if (obj["email"] !== undefined) {
      instance.email = obj["email"];
    }
  
    instance.additionalProperties = new Map();
    const propsToCheck = Object.entries(obj).filter((([key,]) => {return !["displayName","email","additionalProperties"].includes(key);}));
    for (const [key, value] of propsToCheck) {
      instance.additionalProperties.set(key, value as any);
    }
    return instance;
  }
  public static theCodeGenSchema = {"type":"object","$schema":"http://json-schema.org/draft-07/schema","properties":{"displayName":{"type":"string","description":"Name of the user"},"email":{"type":"string","format":"email","description":"Email of the user"}},"$id":"SimpleObject2"};
  public static validate(context?: {data: any, ajvValidatorFunction?: ValidateFunction, ajvInstance?: Ajv, ajvOptions?: AjvOptions}): { valid: boolean; errors?: ErrorObject[]; } {
    const {data, ajvValidatorFunction} = context ?? {};
    const parsedData = typeof data === 'string' ? JSON.parse(data) : data;
    const validate = ajvValidatorFunction ?? this.createValidator(context)
    return {
      valid: validate(parsedData),
      errors: validate.errors ?? undefined,
    };
  }
  public static createValidator(context?: {ajvInstance?: Ajv, ajvOptions?: AjvOptions}): ValidateFunction {
    const {ajvInstance} = {...context ?? {}, ajvInstance: new Ajv(context?.ajvOptions ?? {})};
    addFormats(ajvInstance);
    const validate = ajvInstance.compile(this.theCodeGenSchema);
    return validate;
  }

}
export { SimpleObject2 };"
`;

exports[`payloads typescript should work with no channels 1`] = `
"import {Ajv, Options as AjvOptions, ErrorObject, ValidateFunction} from 'ajv';
import addFormats from 'ajv-formats';
class AnonymousSchema_1 {
  private _type?: 'SimpleObject' = 'SimpleObject';
  private _displayName?: string;
  private _email?: string;
  private _additionalProperties?: Record<string, any>;

  constructor(input: {
    displayName?: string,
    email?: string,
    additionalProperties?: Record<string, any>,
  }) {
    this._displayName = input.displayName;
    this._email = input.email;
    this._additionalProperties = input.additionalProperties;
  }

  get type(): 'SimpleObject' | undefined { return this._type; }

  get displayName(): string | undefined { return this._displayName; }
  set displayName(displayName: string | undefined) { this._displayName = displayName; }

  get email(): string | undefined { return this._email; }
  set email(email: string | undefined) { this._email = email; }

  get additionalProperties(): Record<string, any> | undefined { return this._additionalProperties; }
  set additionalProperties(additionalProperties: Record<string, any> | undefined) { this._additionalProperties = additionalProperties; }

  public marshal() : string {
    let json = '{'
    if(this.type !== undefined) {
      json += \`"type": \${typeof this.type === 'number' || typeof this.type === 'boolean' ? this.type : JSON.stringify(this.type)},\`;
    }
    if(this.displayName !== undefined) {
      json += \`"displayName": \${typeof this.displayName === 'number' || typeof this.displayName === 'boolean' ? this.displayName : JSON.stringify(this.displayName)},\`;
    }
    if(this.email !== undefined) {
      json += \`"email": \${typeof this.email === 'number' || typeof this.email === 'boolean' ? this.email : JSON.stringify(this.email)},\`;
    }
    if(this.additionalProperties !== undefined) { 
      for (const [key, value] of this.additionalProperties.entries()) {
        //Only unwrap those that are not already a property in the JSON object
        if(["type","displayName","email","additionalProperties"].includes(String(key))) continue;
        json += \`"\${key}": \${typeof value === 'number' || typeof value === 'boolean' ? value : JSON.stringify(value)},\`;
      }
    }
    //Remove potential last comma 
    return \`\${json.charAt(json.length-1) === ',' ? json.slice(0, json.length-1) : json}}\`;
  }

  public static unmarshal(json: string | object): AnonymousSchema_1 {
    const obj = typeof json === "object" ? json : JSON.parse(json);
    const instance = new AnonymousSchema_1({} as any);

    if (obj["displayName"] !== undefined) {
      instance.displayName = obj["displayName"];
    }
    if (obj["email"] !== undefined) {
      instance.email = obj["email"];
    }
  
    instance.additionalProperties = new Map();
    const propsToCheck = Object.entries(obj).filter((([key,]) => {return !["type","displayName","email","additionalProperties"].includes(key);}));
    for (const [key, value] of propsToCheck) {
      instance.additionalProperties.set(key, value as any);
    }
    return instance;
  }
  public static theCodeGenSchema = {"type":"object","properties":{"type":{"const":"SimpleObject"},"displayName":{"type":"string","description":"Name of the user"},"email":{"type":"string","format":"email","description":"Email of the user"}}};
  public static validate(context?: {data: any, ajvValidatorFunction?: ValidateFunction, ajvInstance?: Ajv, ajvOptions?: AjvOptions}): { valid: boolean; errors?: ErrorObject[]; } {
    const {data, ajvValidatorFunction} = context ?? {};
    const parsedData = typeof data === 'string' ? JSON.parse(data) : data;
    const validate = ajvValidatorFunction ?? this.createValidator(context)
    return {
      valid: validate(parsedData),
      errors: validate.errors ?? undefined,
    };
  }
  public static createValidator(context?: {ajvInstance?: Ajv, ajvOptions?: AjvOptions}): ValidateFunction {
    const {ajvInstance} = {...context ?? {}, ajvInstance: new Ajv(context?.ajvOptions ?? {})};
    addFormats(ajvInstance);
    const validate = ajvInstance.compile(this.theCodeGenSchema);
    return validate;
  }

}
export { AnonymousSchema_1 };"
`;
