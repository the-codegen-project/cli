{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2"
    }
  ],
  "info": {
    "description": "This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.0",
    "title": "OpenAPI Petstore",
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets"
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/pet": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        }
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "externalDocs": {
          "url": "http://petstore.swagger.io/v2/doc/updatePet",
          "description": "API documentation for the updatePet operation"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        }
      }
    },
    "/pet/findByStatus/{status}/{categoryId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status and category",
        "description": "Find pets by status and category with additional filtering options",
        "operationId": "findPetsByStatusAndCategory",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "Status value that needs to be considered for filter",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            },
            "example": "available"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category ID to filter pets by",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pets to return",
            "required": false,
            "style": "form",
            "explode": true,
            "allowEmptyValue": false,
            "allowReserved": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "example": 10
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of pets to skip before returning results",
            "required": false,
            "style": "form",
            "explode": true,
            "allowEmptyValue": false,
            "allowReserved": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort pets by specified field",
            "required": false,
            "style": "form",
            "explode": true,
            "allowEmptyValue": false,
            "allowReserved": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "id",
                "category",
                "status"
              ],
              "default": "id"
            },
            "examples": {
              "byName": {
                "summary": "Sort by name",
                "value": "name"
              },
              "byId": {
                "summary": "Sort by ID",
                "value": "id"
              }
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order for results",
            "required": false,
            "style": "form",
            "explode": true,
            "allowEmptyValue": false,
            "allowReserved": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "example": "asc"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter pets by tags (comma-separated)",
            "required": false,
            "style": "form",
            "explode": false,
            "allowEmptyValue": true,
            "allowReserved": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]+$"
              },
              "minItems": 0,
              "maxItems": 10
            },
            "examples": {
              "singleTag": {
                "summary": "Single tag filter",
                "value": ["friendly"]
              },
              "multipleTags": {
                "summary": "Multiple tag filters",
                "value": ["friendly", "small", "indoor"]
              }
            }
          },
          {
            "name": "includePetDetails",
            "in": "query",
            "description": "Include detailed pet information in response",
            "required": false,
            "style": "form",
            "explode": true,
            "allowEmptyValue": false,
            "allowReserved": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          },
          {
            "name": "format",
            "in": "query",
            "description": "Response format preference",
            "required": false,
            "style": "form",
            "explode": true,
            "allowEmptyValue": false,
            "allowReserved": true,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "xml",
                "csv"
              ],
              "default": "json"
            },
            "example": "json"
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "Unique request identifier for tracing",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
            },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Preferred language for response messages",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}(-[A-Z]{2})?$",
              "default": "en-US"
            },
            "examples": {
              "english": {
                "summary": "English (US)",
                "value": "en-US"
              },
              "spanish": {
                "summary": "Spanish",
                "value": "es-ES"
              },
              "french": {
                "summary": "French",
                "value": "fr-FR"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value or category ID"
          },
          "404": {
            "description": "Category not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "read:pets"
            ]
          }
        ]
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "components": {
    "requestBodies": {
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "List of user object",
        "required": true
      },
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "description": "Pet object that needs to be added to the store",
        "required": true
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "schemas": {
      "Order": {
        "title": "Pet Order",
        "description": "An order for a pets from the pet store",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Category": {
        "title": "Pet category",
        "description": "A category for a pet",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9\\.\\-_]*[a-zA-Z0-9]+$"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "title": "a User",
        "description": "A User who is purchasing from the pet store",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "title": "Pet Tag",
        "description": "A tag for a pet",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Pet": {
        "title": "a Pet",
        "description": "A pet for sale in the pet store",
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "deprecated": true,
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "ApiResponse": {
        "title": "An uploaded response",
        "description": "Describes the result of uploading an image resource",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}